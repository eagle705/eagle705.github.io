---
layout: post
title:  "NDC 정리"
subtitle:   "NEXON DEVELOPER CONFERENCE 18/4/24~25"
categories: cslog
tags: web
comments: true
---

본 문서는 NDC를 다녀오면서 괜찮은 내용을 위주로 빠르게 필기한 것이다.

### NDC 1일차
#### 인하우스 웹 프레임워크 만들기 (Jul8, 데브켓)
github: https://github.com/devcat-studio/Jul8  
QnA: http://ndcqna.nexon.com/    
보통 Vue, React등 쓰는데.. 장단점이 있음
##### 단점 
- 환경구축이 어려움
- (Webpack: 사용하는 라이브러리 묶어줌, Babel: ES6->ES5 변환)
- Gulp, Browserify, Webpack(대세가 빠르게 바뀜, 1년마다 Major version up됨)

##### 장점
- 데이터바인딩
- 변수 watch
- Virtual DOM

만약 직접 만들면..


개발목표
템플릿은 독립되게! (디자이너가 수정할 수 있게))
자동완성 되면 좋겠다 codegen?

- 러닝커브 짧게
- 오래 유지보수 가능한
-


#### ORM
분산 환경에서 작동되게


## 딥러닝으로 욕설 탐지하기 (조용래 인텔리전스랩 어뷰징탐지팀)

기존엔 금칙어 기반..   
문제점 3가지
- 우회가 쉬움, ex ㅅ1발)
- 금칙어 사전 추가?? (오탐이 잦다!, ex 18채널 ->  $$채널, 몇학년 몇반이야 ->몇학$몇반이야, 스페이스바 ->스페이$$ )
- 비속어와 공격저인 표현 구분 못함(제가 병신이었네요, 배를 확 따서 그냥 회를 쳐먹을까)




- 텍스트 분류: 데이터가 부족..
- 텍스트 분류 고도화
- 딥러닝 모델로 게임 운영에 도움주기

프로젝트 목표: 운영자의 수고를 덜자   
현재: 모든 신고를 운영자가 수동 식별   
지향: 1차 자동분류 후 운영자가 수동 식별   

### 데이터 라벨링!
노가다~ -> 크롤링 + 자체제작(팀이 욕해서 ㅋㅋ 생성)
고도화 -> 레이블링할 데이터를 스마트하게 선택하자(Active Learning), 적은 데이터로도 좋은 결과 나오게~   
```Active learning Literature Survey(2010, Burr ...)```   
Idea: 모델이 가장 헷갈려하는 데이터를 뽑자~!!   
Active learning에 대한 Simulation 적용   


### 모델
1D CNN

입력: ```자모```   
자모로 바꾼 이유: 채팅 데이터(띄어쓰기 X, 오타 많음)   
ex) ㅈㅔㅂㅏㄹ -> ㅈㅔㅂㄹㅏ   
금칙어 사전없이 체크 가능 (56% -> 88%)   

고도화: VDCNN (Very Deep CNN?????? 없는용언데..)   
Skip Connection (Shortcut Connection) 사용함.   
중간에 BatchNorm 적용하고 레이어 2개씩 적용 후 풀링, 그리고 SKip Connection 적용함
56->88->90%   


### 모델 해석
왜 필요한가?    

1. 신뢰성
2. 디버깅
3. 마스킹 (야 이 병신아 -> 야 이 **아)   

-> 텍스트에서 글자 빼보기로 체크함 (약간 노드가 걸리는 부분인데)   
-> LIME 사용함   
-> 모델 실행과 해석을 동시에 할 수 없을까?   
-> Attention 모델 적용함   
-> CNN에 적용했나? 어떻게 했지?   
-> 현재는 CNN 자모로 분류하고, Attention LSTM 또 돌려서.. 자모의 weight의 Avg로 욕 판단한다고함.. 아직 게임서버에 붙이진 않았고, 게임 끝난 후에 제재하거나, TensorFlow Serving 쪽도 고민중이라고함.. 현재는 PyTorch 사용중..

## 회귀 모델 기반의 게임 재화 이상 증감 탐지 룰 개발 (NCSOFT 분석모델링팀 엄혜민)
왜 필요한가?   
- 게임 경제 관점에서 게임 내에 재화량 모니터링함
- 최악의 경우 서버 롤백까지 진행됨

#### 이상 데이터란 무엇인가? 어떻게 찾나?
- Outlier
1. 일반적인 경우
- 평균, 분산을 이용한 탐지

2. 추세가 있는 데이터에서 이상데이터 탐지? 
- 이동 평균, 분산을 이용 (탐지하는 시점부터 과거 N번 정도 Windowing하는 방법으로!)
- 
3. 주기성이 있는 데이터에서 이상 데이터 탐지?
- 시계열 분석(STL)을 이용한 탐지 (전체 분포 혹은 과거 N 시점의 분포로는 탐지가 안될 수 있음) : 데이터를 계절성(Seasonal), 장기적인 변동 패턴(Trend), 나머지(Remainder)로 분해. Remainder의 평균 기준으로 -> 체크!!

#### 게임 재화에서 나타날 수 있는 이상 데이터는?
시간에 따른 변동폭을 고려해야하는 데이터 (새벽시간대와 같이 사용자가 많지 않은 시간대에 어뷰징이 일어나는 경우, 탐지가 더 쉬울수 있음) -> **시간대에 따른 주기성 고려가 필요**
재화에 영향을 주는 추가적인 요인도 고려해야함   
- 고려해야할 주기성: 24시간, 일주일, 월, 계절 등등
- 위의 주기성 외에도 여러가지 이벤트들에 의한 영향도 고려해야함
- How to? 주기성, 이벤트 고려해야함 + '정상 상태'에 대한 정의(모델링)이 필요함


#### How to?
재화 증감량 예측하는 회귀 모델 생성   
시간대 별로 변화는 없는지? -> Box plot   
-> 보통 시각화를 통해 확인함   
회귀 모델의 변수들은 모데인 전문가의 힘을 빌림   
ex) 서버점검이 있을때 증가량이 크게 하락하는 영향 -> 점검시간 변수   
ex2) 시간대에 따른 주기성을 보임 -> 시간 변수   
ex3) 대규모 레이드가 진행될 때는 증가량이 별로 없음-> 레이드 변수   

추가로 데이터의 추세를 반영하는 트렌드 변수를 사용   
-> 이전의 트렌드 값을 회귀 변수로 사용!   

1차 이상 탐지 (매 시간별 재화 증감량 예측)    
-> 신뢰구간의 상한선을 통해 실제 해당시간의 증감량과 비교   
실제값이 예측 상/하한선을 초과하는 경우를 이상데이터로 탐지   

1차 이상 탐지에 추가 Rule 적용   
-> 재화 증감량은 유저들의 행동에 따라 크게 영향을 받기 때문에, (유저가 그동안 모아두었던 아이템을 상점에 한 번에 판매) -> 이상 값이 발생할 가능성이 높음 -> 특정 시간 동안 N번 이상 이상 값이 발생하는 경우 알람을 주는 추가 Rule 적용   

2차 이상 탐지   
-> 급변하진 않지만 게임 재화가 지속적으로 증가하는 현상이 발생할 경우   
-> 소수의 어뷰저가 지속적으로 버그를 악용   
상/하한선을 벗어나지 않기 때문에 1차 이상탐지에서는 탐지되지 않음   

2차 이상탐지는 예측값과 실제 값의 차이인 ```잔차(residual)```를 이용! -> 보통 0을 중심으로 랜덤하게 움직임 -> 근데 지속적으로 증가하는 경우엔 잔차가 랜덤하게 분포하는게 아니라 랜덤하게 쏠림! -> 잔차 자체가 일정 수준 이상으로 넘어가면 이상데이터다라고 탐지함   

R timesuperin package   
```https://github.com/danbi-ncsoft/timesuperin```   
devtools::install_github("danbi-ncsoft/timesuperin")

Q) 게임의 환경은 업데이트 재화의 가치에따라서 변화가 심한데
모델의 업데이트 주기 어떻게 되나요? 
-> 변수는 비정기적, 내용은 정기적으로 반영   

## 이탈 예측
이탈 예측이란?    
유저가 -> 유저로 남아있을지 or 이탈자로 남아있을지   
생존 확률, 생존기간, 유저군의 잔존율을 예측하는 것!!   

신규 유저 유입 대비 기존 유저 유지 비용이 적다   
1) 모바일 시대에는 유저 생존기간이 짧음   
2) 이탈방지를 위한 직접적인 방안이 존재(푸쉬메세지, 이벤트)   


학습 데이터 생성 -> 데이터 가공 -> 모델 생성 -> 성능 평가   
학습데이터 = 학습대상 + 레이블   
전체 유저를 대상으로 하는건 거의 .. 너무 어렵고 비효율적임(봇, 악성유저, 근본적으로 성향이 안맞는 사람들)!, 특정 유저 대상으로 하는게 좋음   
이탈이란? 탈퇴와 같나? No -> 1년 이상 미접속 유저 중 서비스 탈퇴유저는 0.8% -> ```연속미접속기간``` == ```탈퇴자``` 로 보겠다!   


미접속 기간 어떻게 정의해야하나?   
짧으면 -> 비이탈자를 잘못 탐지,   
길면 -> 이탈자 방치   

적절한 미접속 기간 = 내부요인(업데이트 주기) +  미접속 기간에 따른 복귀/이탈율   

연속 미접속 기간 windowing해서 그래프 그림(상한선이 예제에서는 26주였는데, 업데이트 기간임)   
추천: 충분한 기간동안 Windowing 추천(시점에 따라 이탈/복귀율 크게 차이남)   
변수 설정: 활동이력, 사회활동, 결제이력 등에 대한 추세, 변동성 계산   

모델 생성: 예측력 + 해석력 둘다 고려해야함     
어떤 메트릭 쓸지에 대해서도 목표와 정책을 고려해야함. 많은 유저에 대해서 고려해야하는데 precision 고민하는거 에러겠지?   
precision(확실히 이탈 예측 가능한 유저만 예측할래)   
Recall(최대한 많은 유저들을 잠재 이탈자로 간주 할래)  
-------

## 듀랑고 서버 아키텍쳐 (이흥섭, 넥슨코리아)
