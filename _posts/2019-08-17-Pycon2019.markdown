---
layout: post
title:  "Pycon 2019 Logs"
subtitle:   "pycon 2019"
categories: cslog
tags: cslog
comments: true
use_math: true
---

### 정적 타입 검사로 더 나은 Python 코드 작성하기
- Presenter: 이창희

#### 정적타입 언어 vs 동적 타입언어
-정적타입: 컴파일시 정해짐
-동적타입:

#### 배경
- 프로젝트 커지면 개발자도 많아지고 유지보수 어려움
- 동적 타입 언어지만 정적 타입 검사기를 도입함


#### 장점
- 코드 가독성 증가
- 버그 예방

#### Paper: To Type or Not to Type
- 자바스크립트의 경우 타입스크립트 썼을때 15%의 버그를 미리 예방함


#### Python??!
- Function Annotation (3.0)
- Tpye Annotation (3.5)
- Variabble Annotation (3.6)

- 타입 힌팅
```python
def is_same_person(x: Person, y: Person):
  ...
  
# Error 발생 -> list는 기본 자료형이기 때문
x: list[str] = ['A', 'B', 'C']

import typing # python 3.5에서 추가됨
from typing import List, Tuple, Dict
my_list: List[str, int] = [] # Error


from typing import List, Tuple, Dict, Union, Optional, NewType
my_list: List[Union[str, int]] = [] 
my_list2: List[Union[str, None]] = []
my_list3: List[Optional[str]] = [] 

from typing import TypeVar, Sequence, Generic, Callable

# T = TypeVar('T') # generic!!
T = TypeVar('T', int, float) # generic!! with 제한
def first(s: Sequence[T]) -> T:
  return s[0]
  
dwef sum_to_str(x:int, y:int):
  return x+y
f: Callable[[int,int], str] = sum_to_str
f(10,20) #이걸로 쓸수있음
```
- 타이핑 모듈은 실제로 제안만하지 코드 실행을 '제한'하진 않음
- 실제 제한하는건 ```mypy```가 해줌
- ```$ mypy my_app.py```
- mypy는 가장 먼저 대입된 변수의 자료형만 보고 판단함

```python
x = 1
x = "abc" # mypy에선 에러

from typing import Any
x: Any = 1 # Any형을 쓰면 에러 안생김
x = "abc"
```

- mypy docs: [mypy.readthedocs.io](mypy.readthedocs.io)

---------

### 교육의 미래를 바꾸는 오늘의 파이써니스쿨
- Presenter: 송석리

#### 첫번째 수업_2018 데이터분석
- 단순히 문법만 배우는 수업X, 맥락이 있는 나만의 프로젝트 만들기
- 파이썬 문법 간단히 정리(1H),학급 명단 텍스트파일로 자리 바꾸기 프로젝트
  - 주번 선정, 팀 편성등 응용
- (2인 1팀) 기온데이터 살펴보고 질문 1가지씩 발표
  - 간단한 데이터 시각화 방법(matplotlib, 헷갈리는 개념은 유투브('석리송')으로 학습)
- 내 생일 최고 기온 데이터로 그래프를 그리면 지구 온난화를 확인할 수 있을까? 아니라면 어떤 방법으로 확인할 수 있을까?
  - 데이터에 질문하고 스스로 답을 찾을 수 있도록 준비

#### 두번째 수업_2018 과학수업
- 3D 과학 시뮬레이션 프로젝트 수업 (VPython 라이브러리 활용)
- VPython은 30분 완성
- 4주동안 프로젝트 진행
- 결과는 유트브로 발표 및 공유 (한성과학고등학교 파이썬 수업 검색)
- 몰입도가 압도적으로 높음
- 발표를 보는 것만으로도 재미있는 경험
- 파이썬을 처음 배울 때 충분히 고려해볼만한 시도 

#### 세번째 수업_2019 누군가의 연구소
- 실제로 '누군가'가 겪고 있는 수학/과학 문제를 발견하고 해결하기
- 전체 10시간중 문제발견 및 문제 정의 단계에 4시간
- MVP 정의해서 프로토타입 제작, 전체적인 과정을 '린'하게 진행
- 협업을 위한 고민, 포스트잇/화이트보드/구글문서/깃헙
- 실험적으로 '항해일지' 시도, 프로젝트 전체 과정에 대한 기록
- 결과적으로는 매우 만족함
- Github, 화이트보드, 구글문서를 활용해서 즉각적인 피드백+수정 
- 2학기에는 3개 이상의 프로젝트에 코드로 기여하는 것이 수행평가

#### 지향하는 수업
- 프로그래밍 언어를 이야기하지 않는, 실제 문제를 해결해보는 수업
- 파이썬은 그저 거들뿐, {'파이썬': '손가락', '문제해결':'달'}
- 오픈소스 문화를 경험하는 수업
- 문제발견부터 해결까지의 과정에 학생들이 몰입하도록 


```python

```